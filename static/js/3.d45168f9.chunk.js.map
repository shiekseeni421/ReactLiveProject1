{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","service/index.js","service/toast.js"],"names":["_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","i","F","s","n","length","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","request","url","method","data","isLoader","Promise","resolve","reject","token","localStorage","getItem","config","process","headers","Authorization","console","log","showLoader","axios","then","res","catch","response","status","message","Toast","type","Modal","render","defaultProps","setLoaderStatus","time","item","NotificationManager"],"mappings":"6GAAA,8CACe,SAASA,EAA2BC,GACjD,GAAsB,qBAAXC,QAAgD,MAAtBD,EAAEC,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQJ,KAAOA,EAAI,YAA2BA,IAAK,CAC3D,IAAIK,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKL,EAAES,OAAe,CACxBC,MAAM,GAED,CACLA,MAAM,EACNC,MAAOX,EAAEK,OAGbO,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGR,GAIP,MAAM,IAAIS,UAAU,yIAGtB,IAAIC,EAGAC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLZ,EAAG,WACDS,EAAKhB,EAAEC,OAAOC,aAEhBM,EAAG,WACD,IAAIY,EAAOJ,EAAGK,OAEd,OADAH,EAAmBE,EAAKV,KACjBU,GAETR,EAAG,SAAWU,GACZH,GAAS,EACTF,EAAMK,GAERR,EAAG,WACD,IACOI,GAAoC,MAAhBF,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIG,EAAQ,MAAMF,O,gCClD1B,qFAIaM,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KAAhB,IAAsBC,gBAAtB,gBACrB,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAIC,EAAQC,aAAaC,QAAQ,SAC7BC,EAAS,CACXV,IAAKW,+BAAgCX,EACrCC,OAAQA,EACRC,KAAMA,GAAc,KACpBU,QAAS,CACPC,cAAeN,EAAQ,UAAYA,EAAQ,GAC3C,eAAgB,qBAIpBO,QAAQC,IAAIL,EAAQ,UAAWP,GAC/Ba,EAAWb,GAEXc,IAAMP,GACHQ,MAAK,SAACC,GAGL,OAFAL,QAAQC,IAAII,EAAK,YACjBH,GAAW,GACJX,EAAQc,MAEhBC,OAAM,YAAmB,IAAhBC,EAAe,EAAfA,SAGR,GAFAP,QAAQC,IAAIM,EAAU,SACtBL,GAAW,GACPK,EAAU,CACWA,EAAjBC,OAAN,IACMC,EADiBF,EAATnB,KACRqB,QACNC,gBAAM,CAAEC,KAAM,QAASF,QAASA,SAQhCC,gBAAM,CACJC,KAAM,QACNF,QAAS,2DAIb,OAAOjB,EAAOe,UAIhBL,EAAa,SAACM,GACdI,WAASA,UAAMC,QAAUD,UAAMC,OAAOC,cACxCF,UAAMC,OAAOC,aAAaC,gBAAgBP,K,kGCjDjCE,EAAQ,SAAC,GAAkD,IAAD,IAA/CC,YAA+C,MAAxC,UAAwC,EAA7BF,EAA6B,EAA7BA,QAA6B,IAApBO,YAAoB,MAAb,OAAa,EACrE,GAAInD,MAAMC,QAAQ2C,GAAU,CAC1B,IAAIQ,EADsB,gBAGbR,GAHa,IAG1B,2BAAKQ,EAAiB,QACpBC,sBAAoBP,GAAMM,EAAKR,QAAS,GAAIO,GAJpB,oCAO1BE,sBAAoBP,GAAMF,EAAS,GAAIO","file":"static/js/3.d45168f9.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import axios from \"axios\";\nimport { Toast } from \"./toast\";\nimport Modal from \"component/Common/LoaderModal\";\n\nexport const request = ({ url, method, data, isLoader = true }) =>\n  new Promise((resolve, reject) => {\n    let token = localStorage.getItem(\"token\");\n    let config = {\n      url: process.env.REACT_APP_API_URL + url,\n      method: method,\n      data: data ? data : null,\n      headers: {\n        Authorization: token ? \"Bearer \" + token : \"\",\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    console.log(config, \"request\", isLoader);\n    showLoader(isLoader);\n\n    axios(config)\n      .then((res) => {\n        console.log(res, \"response\");\n        showLoader(false);\n        return resolve(res);\n      })\n      .catch(({ response }) => {\n        console.log(response, \"error\");\n        showLoader(false);\n        if (response) {\n          let { status, data } = response;\n          let { message } = data;\n          Toast({ type: \"error\", message: message });\n\n          if (status === 401) {\n            // let history = useHistory()\n            //clear and navigate to login\n            // history.replace('/auth/login');\n          }\n        } else {\n          Toast({\n            type: \"error\",\n            message: \"Not able to connect the server. Please try again later\",\n          });\n        }\n\n        return reject(response);\n      });\n  });\n\nconst showLoader = (status) => {\n  if (Modal && Modal.render && Modal.render.defaultProps) {\n    Modal.render.defaultProps.setLoaderStatus(status);\n  }\n};\n","import { NotificationManager } from \"react-notifications\";\n\n//Toast\nexport const Toast = ({ type = \"success\", message, time = \"4000\" }) => {\n  if (Array.isArray(message)) {\n    let item;\n\n    for (item of message) {\n      NotificationManager[type](item.message, \"\", time);\n    }\n  } else {\n    NotificationManager[type](message, \"\", time);\n  }\n};"],"sourceRoot":""}